# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['DnsDomainArgs', 'DnsDomain']

@pulumi.input_type
class DnsDomainArgs:
    def __init__(__self__, *,
                 authoritative: Optional[pulumi.Input[bool]] = None,
                 is_default: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ttl: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a DnsDomain resource.
        :param pulumi.Input[bool] authoritative: Boolean value indicating if the new DNS domain is authoritative. Defaults to `false`.
        :param pulumi.Input[bool] is_default: Boolean value indicating if the new DNS domain will be set as the default in the MAAS environment. Defaults to `false`.
        :param pulumi.Input[str] name: The name of the new DNS domain.
        :param pulumi.Input[int] ttl: The default TTL for the new DNS domain.
        """
        if authoritative is not None:
            pulumi.set(__self__, "authoritative", authoritative)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter
    def authoritative(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean value indicating if the new DNS domain is authoritative. Defaults to `false`.
        """
        return pulumi.get(self, "authoritative")

    @authoritative.setter
    def authoritative(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "authoritative", value)

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean value indicating if the new DNS domain will be set as the default in the MAAS environment. Defaults to `false`.
        """
        return pulumi.get(self, "is_default")

    @is_default.setter
    def is_default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the new DNS domain.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[int]]:
        """
        The default TTL for the new DNS domain.
        """
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ttl", value)


@pulumi.input_type
class _DnsDomainState:
    def __init__(__self__, *,
                 authoritative: Optional[pulumi.Input[bool]] = None,
                 is_default: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ttl: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering DnsDomain resources.
        :param pulumi.Input[bool] authoritative: Boolean value indicating if the new DNS domain is authoritative. Defaults to `false`.
        :param pulumi.Input[bool] is_default: Boolean value indicating if the new DNS domain will be set as the default in the MAAS environment. Defaults to `false`.
        :param pulumi.Input[str] name: The name of the new DNS domain.
        :param pulumi.Input[int] ttl: The default TTL for the new DNS domain.
        """
        if authoritative is not None:
            pulumi.set(__self__, "authoritative", authoritative)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter
    def authoritative(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean value indicating if the new DNS domain is authoritative. Defaults to `false`.
        """
        return pulumi.get(self, "authoritative")

    @authoritative.setter
    def authoritative(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "authoritative", value)

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean value indicating if the new DNS domain will be set as the default in the MAAS environment. Defaults to `false`.
        """
        return pulumi.get(self, "is_default")

    @is_default.setter
    def is_default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the new DNS domain.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[int]]:
        """
        The default TTL for the new DNS domain.
        """
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ttl", value)


class DnsDomain(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 authoritative: Optional[pulumi.Input[bool]] = None,
                 is_default: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ttl: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Create a DnsDomain resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] authoritative: Boolean value indicating if the new DNS domain is authoritative. Defaults to `false`.
        :param pulumi.Input[bool] is_default: Boolean value indicating if the new DNS domain will be set as the default in the MAAS environment. Defaults to `false`.
        :param pulumi.Input[str] name: The name of the new DNS domain.
        :param pulumi.Input[int] ttl: The default TTL for the new DNS domain.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[DnsDomainArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a DnsDomain resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param DnsDomainArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DnsDomainArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 authoritative: Optional[pulumi.Input[bool]] = None,
                 is_default: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ttl: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DnsDomainArgs.__new__(DnsDomainArgs)

            __props__.__dict__["authoritative"] = authoritative
            __props__.__dict__["is_default"] = is_default
            __props__.__dict__["name"] = name
            __props__.__dict__["ttl"] = ttl
        super(DnsDomain, __self__).__init__(
            'maas:index/dnsDomain:DnsDomain',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            authoritative: Optional[pulumi.Input[bool]] = None,
            is_default: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            ttl: Optional[pulumi.Input[int]] = None) -> 'DnsDomain':
        """
        Get an existing DnsDomain resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] authoritative: Boolean value indicating if the new DNS domain is authoritative. Defaults to `false`.
        :param pulumi.Input[bool] is_default: Boolean value indicating if the new DNS domain will be set as the default in the MAAS environment. Defaults to `false`.
        :param pulumi.Input[str] name: The name of the new DNS domain.
        :param pulumi.Input[int] ttl: The default TTL for the new DNS domain.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DnsDomainState.__new__(_DnsDomainState)

        __props__.__dict__["authoritative"] = authoritative
        __props__.__dict__["is_default"] = is_default
        __props__.__dict__["name"] = name
        __props__.__dict__["ttl"] = ttl
        return DnsDomain(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def authoritative(self) -> pulumi.Output[Optional[bool]]:
        """
        Boolean value indicating if the new DNS domain is authoritative. Defaults to `false`.
        """
        return pulumi.get(self, "authoritative")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> pulumi.Output[Optional[bool]]:
        """
        Boolean value indicating if the new DNS domain will be set as the default in the MAAS environment. Defaults to `false`.
        """
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the new DNS domain.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ttl(self) -> pulumi.Output[Optional[int]]:
        """
        The default TTL for the new DNS domain.
        """
        return pulumi.get(self, "ttl")

