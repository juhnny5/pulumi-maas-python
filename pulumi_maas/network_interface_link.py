# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['NetworkInterfaceLinkArgs', 'NetworkInterfaceLink']

@pulumi.input_type
class NetworkInterfaceLinkArgs:
    def __init__(__self__, *,
                 machine: pulumi.Input[str],
                 network_interface: pulumi.Input[str],
                 subnet: pulumi.Input[str],
                 default_gateway: Optional[pulumi.Input[bool]] = None,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a NetworkInterfaceLink resource.
        :param pulumi.Input[str] machine: The identifier (system ID, hostname, or FQDN) of the machine with the network interface.
        :param pulumi.Input[str] network_interface: The identifier (MAC address, name, or ID) of the network interface.
        :param pulumi.Input[str] subnet: The identifier (CIDR or ID) of the subnet to be connected.
        :param pulumi.Input[bool] default_gateway: Boolean value. When enabled, it sets the subnet gateway IP address as the default gateway for the machine the interface
               belongs to. This option can only be used with the `AUTO` and `STATIC` modes. Defaults to `false`.
        :param pulumi.Input[str] ip_address: Valid IP address (from the given subnet) to be configured on the network interface. Only used when `mode` is set to
               `STATIC`.
        :param pulumi.Input[str] mode: Connection mode to subnet. It defaults to `AUTO`. Valid options are: * `AUTO` - Random static IP address from the
               subnet. * `DHCP` - IP address from the DHCP on the given subnet. * `STATIC` - Use `ip_address` as static IP address. *
               `LINK_UP` - Bring the interface up only on the given subnet. No IP address will be assigned.
        """
        pulumi.set(__self__, "machine", machine)
        pulumi.set(__self__, "network_interface", network_interface)
        pulumi.set(__self__, "subnet", subnet)
        if default_gateway is not None:
            pulumi.set(__self__, "default_gateway", default_gateway)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def machine(self) -> pulumi.Input[str]:
        """
        The identifier (system ID, hostname, or FQDN) of the machine with the network interface.
        """
        return pulumi.get(self, "machine")

    @machine.setter
    def machine(self, value: pulumi.Input[str]):
        pulumi.set(self, "machine", value)

    @property
    @pulumi.getter(name="networkInterface")
    def network_interface(self) -> pulumi.Input[str]:
        """
        The identifier (MAC address, name, or ID) of the network interface.
        """
        return pulumi.get(self, "network_interface")

    @network_interface.setter
    def network_interface(self, value: pulumi.Input[str]):
        pulumi.set(self, "network_interface", value)

    @property
    @pulumi.getter
    def subnet(self) -> pulumi.Input[str]:
        """
        The identifier (CIDR or ID) of the subnet to be connected.
        """
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet", value)

    @property
    @pulumi.getter(name="defaultGateway")
    def default_gateway(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean value. When enabled, it sets the subnet gateway IP address as the default gateway for the machine the interface
        belongs to. This option can only be used with the `AUTO` and `STATIC` modes. Defaults to `false`.
        """
        return pulumi.get(self, "default_gateway")

    @default_gateway.setter
    def default_gateway(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "default_gateway", value)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[str]]:
        """
        Valid IP address (from the given subnet) to be configured on the network interface. Only used when `mode` is set to
        `STATIC`.
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Connection mode to subnet. It defaults to `AUTO`. Valid options are: * `AUTO` - Random static IP address from the
        subnet. * `DHCP` - IP address from the DHCP on the given subnet. * `STATIC` - Use `ip_address` as static IP address. *
        `LINK_UP` - Bring the interface up only on the given subnet. No IP address will be assigned.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class _NetworkInterfaceLinkState:
    def __init__(__self__, *,
                 default_gateway: Optional[pulumi.Input[bool]] = None,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 machine: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 network_interface: Optional[pulumi.Input[str]] = None,
                 subnet: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering NetworkInterfaceLink resources.
        :param pulumi.Input[bool] default_gateway: Boolean value. When enabled, it sets the subnet gateway IP address as the default gateway for the machine the interface
               belongs to. This option can only be used with the `AUTO` and `STATIC` modes. Defaults to `false`.
        :param pulumi.Input[str] ip_address: Valid IP address (from the given subnet) to be configured on the network interface. Only used when `mode` is set to
               `STATIC`.
        :param pulumi.Input[str] machine: The identifier (system ID, hostname, or FQDN) of the machine with the network interface.
        :param pulumi.Input[str] mode: Connection mode to subnet. It defaults to `AUTO`. Valid options are: * `AUTO` - Random static IP address from the
               subnet. * `DHCP` - IP address from the DHCP on the given subnet. * `STATIC` - Use `ip_address` as static IP address. *
               `LINK_UP` - Bring the interface up only on the given subnet. No IP address will be assigned.
        :param pulumi.Input[str] network_interface: The identifier (MAC address, name, or ID) of the network interface.
        :param pulumi.Input[str] subnet: The identifier (CIDR or ID) of the subnet to be connected.
        """
        if default_gateway is not None:
            pulumi.set(__self__, "default_gateway", default_gateway)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if machine is not None:
            pulumi.set(__self__, "machine", machine)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if network_interface is not None:
            pulumi.set(__self__, "network_interface", network_interface)
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)

    @property
    @pulumi.getter(name="defaultGateway")
    def default_gateway(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean value. When enabled, it sets the subnet gateway IP address as the default gateway for the machine the interface
        belongs to. This option can only be used with the `AUTO` and `STATIC` modes. Defaults to `false`.
        """
        return pulumi.get(self, "default_gateway")

    @default_gateway.setter
    def default_gateway(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "default_gateway", value)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[str]]:
        """
        Valid IP address (from the given subnet) to be configured on the network interface. Only used when `mode` is set to
        `STATIC`.
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter
    def machine(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier (system ID, hostname, or FQDN) of the machine with the network interface.
        """
        return pulumi.get(self, "machine")

    @machine.setter
    def machine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "machine", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Connection mode to subnet. It defaults to `AUTO`. Valid options are: * `AUTO` - Random static IP address from the
        subnet. * `DHCP` - IP address from the DHCP on the given subnet. * `STATIC` - Use `ip_address` as static IP address. *
        `LINK_UP` - Bring the interface up only on the given subnet. No IP address will be assigned.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="networkInterface")
    def network_interface(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier (MAC address, name, or ID) of the network interface.
        """
        return pulumi.get(self, "network_interface")

    @network_interface.setter
    def network_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_interface", value)

    @property
    @pulumi.getter
    def subnet(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier (CIDR or ID) of the subnet to be connected.
        """
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet", value)


class NetworkInterfaceLink(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 default_gateway: Optional[pulumi.Input[bool]] = None,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 machine: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 network_interface: Optional[pulumi.Input[str]] = None,
                 subnet: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a NetworkInterfaceLink resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] default_gateway: Boolean value. When enabled, it sets the subnet gateway IP address as the default gateway for the machine the interface
               belongs to. This option can only be used with the `AUTO` and `STATIC` modes. Defaults to `false`.
        :param pulumi.Input[str] ip_address: Valid IP address (from the given subnet) to be configured on the network interface. Only used when `mode` is set to
               `STATIC`.
        :param pulumi.Input[str] machine: The identifier (system ID, hostname, or FQDN) of the machine with the network interface.
        :param pulumi.Input[str] mode: Connection mode to subnet. It defaults to `AUTO`. Valid options are: * `AUTO` - Random static IP address from the
               subnet. * `DHCP` - IP address from the DHCP on the given subnet. * `STATIC` - Use `ip_address` as static IP address. *
               `LINK_UP` - Bring the interface up only on the given subnet. No IP address will be assigned.
        :param pulumi.Input[str] network_interface: The identifier (MAC address, name, or ID) of the network interface.
        :param pulumi.Input[str] subnet: The identifier (CIDR or ID) of the subnet to be connected.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NetworkInterfaceLinkArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a NetworkInterfaceLink resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param NetworkInterfaceLinkArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NetworkInterfaceLinkArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 default_gateway: Optional[pulumi.Input[bool]] = None,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 machine: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 network_interface: Optional[pulumi.Input[str]] = None,
                 subnet: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NetworkInterfaceLinkArgs.__new__(NetworkInterfaceLinkArgs)

            __props__.__dict__["default_gateway"] = default_gateway
            __props__.__dict__["ip_address"] = ip_address
            if machine is None and not opts.urn:
                raise TypeError("Missing required property 'machine'")
            __props__.__dict__["machine"] = machine
            __props__.__dict__["mode"] = mode
            if network_interface is None and not opts.urn:
                raise TypeError("Missing required property 'network_interface'")
            __props__.__dict__["network_interface"] = network_interface
            if subnet is None and not opts.urn:
                raise TypeError("Missing required property 'subnet'")
            __props__.__dict__["subnet"] = subnet
        super(NetworkInterfaceLink, __self__).__init__(
            'maas:index/networkInterfaceLink:NetworkInterfaceLink',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            default_gateway: Optional[pulumi.Input[bool]] = None,
            ip_address: Optional[pulumi.Input[str]] = None,
            machine: Optional[pulumi.Input[str]] = None,
            mode: Optional[pulumi.Input[str]] = None,
            network_interface: Optional[pulumi.Input[str]] = None,
            subnet: Optional[pulumi.Input[str]] = None) -> 'NetworkInterfaceLink':
        """
        Get an existing NetworkInterfaceLink resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] default_gateway: Boolean value. When enabled, it sets the subnet gateway IP address as the default gateway for the machine the interface
               belongs to. This option can only be used with the `AUTO` and `STATIC` modes. Defaults to `false`.
        :param pulumi.Input[str] ip_address: Valid IP address (from the given subnet) to be configured on the network interface. Only used when `mode` is set to
               `STATIC`.
        :param pulumi.Input[str] machine: The identifier (system ID, hostname, or FQDN) of the machine with the network interface.
        :param pulumi.Input[str] mode: Connection mode to subnet. It defaults to `AUTO`. Valid options are: * `AUTO` - Random static IP address from the
               subnet. * `DHCP` - IP address from the DHCP on the given subnet. * `STATIC` - Use `ip_address` as static IP address. *
               `LINK_UP` - Bring the interface up only on the given subnet. No IP address will be assigned.
        :param pulumi.Input[str] network_interface: The identifier (MAC address, name, or ID) of the network interface.
        :param pulumi.Input[str] subnet: The identifier (CIDR or ID) of the subnet to be connected.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NetworkInterfaceLinkState.__new__(_NetworkInterfaceLinkState)

        __props__.__dict__["default_gateway"] = default_gateway
        __props__.__dict__["ip_address"] = ip_address
        __props__.__dict__["machine"] = machine
        __props__.__dict__["mode"] = mode
        __props__.__dict__["network_interface"] = network_interface
        __props__.__dict__["subnet"] = subnet
        return NetworkInterfaceLink(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="defaultGateway")
    def default_gateway(self) -> pulumi.Output[Optional[bool]]:
        """
        Boolean value. When enabled, it sets the subnet gateway IP address as the default gateway for the machine the interface
        belongs to. This option can only be used with the `AUTO` and `STATIC` modes. Defaults to `false`.
        """
        return pulumi.get(self, "default_gateway")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> pulumi.Output[str]:
        """
        Valid IP address (from the given subnet) to be configured on the network interface. Only used when `mode` is set to
        `STATIC`.
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter
    def machine(self) -> pulumi.Output[str]:
        """
        The identifier (system ID, hostname, or FQDN) of the machine with the network interface.
        """
        return pulumi.get(self, "machine")

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Output[Optional[str]]:
        """
        Connection mode to subnet. It defaults to `AUTO`. Valid options are: * `AUTO` - Random static IP address from the
        subnet. * `DHCP` - IP address from the DHCP on the given subnet. * `STATIC` - Use `ip_address` as static IP address. *
        `LINK_UP` - Bring the interface up only on the given subnet. No IP address will be assigned.
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="networkInterface")
    def network_interface(self) -> pulumi.Output[str]:
        """
        The identifier (MAC address, name, or ID) of the network interface.
        """
        return pulumi.get(self, "network_interface")

    @property
    @pulumi.getter
    def subnet(self) -> pulumi.Output[str]:
        """
        The identifier (CIDR or ID) of the subnet to be connected.
        """
        return pulumi.get(self, "subnet")

