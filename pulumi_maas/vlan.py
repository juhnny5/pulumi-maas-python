# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['VlanArgs', 'Vlan']

@pulumi.input_type
class VlanArgs:
    def __init__(__self__, *,
                 fabric: pulumi.Input[str],
                 vid: pulumi.Input[int],
                 dhcp_on: Optional[pulumi.Input[bool]] = None,
                 mtu: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 space: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Vlan resource.
        :param pulumi.Input[str] fabric: The identifier (name or ID) of the fabric for the new VLAN.
        :param pulumi.Input[int] vid: The traffic segregation ID for the new VLAN.
        :param pulumi.Input[bool] dhcp_on: Boolean value. Whether or not DHCP should be managed on the new VLAN. This argument is computed if it's not set.
        :param pulumi.Input[int] mtu: The MTU to use on the new VLAN. This argument is computed if it's not set.
        :param pulumi.Input[str] name: The name of the new VLAN. This argument is computed if it's not set.
        :param pulumi.Input[str] space: The space of the new VLAN. Passing in an empty string (or the string `undefined`) will cause the VLAN to be placed in
               the `undefined` space. This argument is computed if it's not set.
        """
        pulumi.set(__self__, "fabric", fabric)
        pulumi.set(__self__, "vid", vid)
        if dhcp_on is not None:
            pulumi.set(__self__, "dhcp_on", dhcp_on)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if space is not None:
            pulumi.set(__self__, "space", space)

    @property
    @pulumi.getter
    def fabric(self) -> pulumi.Input[str]:
        """
        The identifier (name or ID) of the fabric for the new VLAN.
        """
        return pulumi.get(self, "fabric")

    @fabric.setter
    def fabric(self, value: pulumi.Input[str]):
        pulumi.set(self, "fabric", value)

    @property
    @pulumi.getter
    def vid(self) -> pulumi.Input[int]:
        """
        The traffic segregation ID for the new VLAN.
        """
        return pulumi.get(self, "vid")

    @vid.setter
    def vid(self, value: pulumi.Input[int]):
        pulumi.set(self, "vid", value)

    @property
    @pulumi.getter(name="dhcpOn")
    def dhcp_on(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean value. Whether or not DHCP should be managed on the new VLAN. This argument is computed if it's not set.
        """
        return pulumi.get(self, "dhcp_on")

    @dhcp_on.setter
    def dhcp_on(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dhcp_on", value)

    @property
    @pulumi.getter
    def mtu(self) -> Optional[pulumi.Input[int]]:
        """
        The MTU to use on the new VLAN. This argument is computed if it's not set.
        """
        return pulumi.get(self, "mtu")

    @mtu.setter
    def mtu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mtu", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the new VLAN. This argument is computed if it's not set.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def space(self) -> Optional[pulumi.Input[str]]:
        """
        The space of the new VLAN. Passing in an empty string (or the string `undefined`) will cause the VLAN to be placed in
        the `undefined` space. This argument is computed if it's not set.
        """
        return pulumi.get(self, "space")

    @space.setter
    def space(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "space", value)


@pulumi.input_type
class _VlanState:
    def __init__(__self__, *,
                 dhcp_on: Optional[pulumi.Input[bool]] = None,
                 fabric: Optional[pulumi.Input[str]] = None,
                 mtu: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 space: Optional[pulumi.Input[str]] = None,
                 vid: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering Vlan resources.
        :param pulumi.Input[bool] dhcp_on: Boolean value. Whether or not DHCP should be managed on the new VLAN. This argument is computed if it's not set.
        :param pulumi.Input[str] fabric: The identifier (name or ID) of the fabric for the new VLAN.
        :param pulumi.Input[int] mtu: The MTU to use on the new VLAN. This argument is computed if it's not set.
        :param pulumi.Input[str] name: The name of the new VLAN. This argument is computed if it's not set.
        :param pulumi.Input[str] space: The space of the new VLAN. Passing in an empty string (or the string `undefined`) will cause the VLAN to be placed in
               the `undefined` space. This argument is computed if it's not set.
        :param pulumi.Input[int] vid: The traffic segregation ID for the new VLAN.
        """
        if dhcp_on is not None:
            pulumi.set(__self__, "dhcp_on", dhcp_on)
        if fabric is not None:
            pulumi.set(__self__, "fabric", fabric)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if space is not None:
            pulumi.set(__self__, "space", space)
        if vid is not None:
            pulumi.set(__self__, "vid", vid)

    @property
    @pulumi.getter(name="dhcpOn")
    def dhcp_on(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean value. Whether or not DHCP should be managed on the new VLAN. This argument is computed if it's not set.
        """
        return pulumi.get(self, "dhcp_on")

    @dhcp_on.setter
    def dhcp_on(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dhcp_on", value)

    @property
    @pulumi.getter
    def fabric(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier (name or ID) of the fabric for the new VLAN.
        """
        return pulumi.get(self, "fabric")

    @fabric.setter
    def fabric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fabric", value)

    @property
    @pulumi.getter
    def mtu(self) -> Optional[pulumi.Input[int]]:
        """
        The MTU to use on the new VLAN. This argument is computed if it's not set.
        """
        return pulumi.get(self, "mtu")

    @mtu.setter
    def mtu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mtu", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the new VLAN. This argument is computed if it's not set.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def space(self) -> Optional[pulumi.Input[str]]:
        """
        The space of the new VLAN. Passing in an empty string (or the string `undefined`) will cause the VLAN to be placed in
        the `undefined` space. This argument is computed if it's not set.
        """
        return pulumi.get(self, "space")

    @space.setter
    def space(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "space", value)

    @property
    @pulumi.getter
    def vid(self) -> Optional[pulumi.Input[int]]:
        """
        The traffic segregation ID for the new VLAN.
        """
        return pulumi.get(self, "vid")

    @vid.setter
    def vid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vid", value)


class Vlan(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dhcp_on: Optional[pulumi.Input[bool]] = None,
                 fabric: Optional[pulumi.Input[str]] = None,
                 mtu: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 space: Optional[pulumi.Input[str]] = None,
                 vid: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Create a Vlan resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] dhcp_on: Boolean value. Whether or not DHCP should be managed on the new VLAN. This argument is computed if it's not set.
        :param pulumi.Input[str] fabric: The identifier (name or ID) of the fabric for the new VLAN.
        :param pulumi.Input[int] mtu: The MTU to use on the new VLAN. This argument is computed if it's not set.
        :param pulumi.Input[str] name: The name of the new VLAN. This argument is computed if it's not set.
        :param pulumi.Input[str] space: The space of the new VLAN. Passing in an empty string (or the string `undefined`) will cause the VLAN to be placed in
               the `undefined` space. This argument is computed if it's not set.
        :param pulumi.Input[int] vid: The traffic segregation ID for the new VLAN.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VlanArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Vlan resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param VlanArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VlanArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dhcp_on: Optional[pulumi.Input[bool]] = None,
                 fabric: Optional[pulumi.Input[str]] = None,
                 mtu: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 space: Optional[pulumi.Input[str]] = None,
                 vid: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VlanArgs.__new__(VlanArgs)

            __props__.__dict__["dhcp_on"] = dhcp_on
            if fabric is None and not opts.urn:
                raise TypeError("Missing required property 'fabric'")
            __props__.__dict__["fabric"] = fabric
            __props__.__dict__["mtu"] = mtu
            __props__.__dict__["name"] = name
            __props__.__dict__["space"] = space
            if vid is None and not opts.urn:
                raise TypeError("Missing required property 'vid'")
            __props__.__dict__["vid"] = vid
        super(Vlan, __self__).__init__(
            'maas:index/vlan:Vlan',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            dhcp_on: Optional[pulumi.Input[bool]] = None,
            fabric: Optional[pulumi.Input[str]] = None,
            mtu: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            space: Optional[pulumi.Input[str]] = None,
            vid: Optional[pulumi.Input[int]] = None) -> 'Vlan':
        """
        Get an existing Vlan resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] dhcp_on: Boolean value. Whether or not DHCP should be managed on the new VLAN. This argument is computed if it's not set.
        :param pulumi.Input[str] fabric: The identifier (name or ID) of the fabric for the new VLAN.
        :param pulumi.Input[int] mtu: The MTU to use on the new VLAN. This argument is computed if it's not set.
        :param pulumi.Input[str] name: The name of the new VLAN. This argument is computed if it's not set.
        :param pulumi.Input[str] space: The space of the new VLAN. Passing in an empty string (or the string `undefined`) will cause the VLAN to be placed in
               the `undefined` space. This argument is computed if it's not set.
        :param pulumi.Input[int] vid: The traffic segregation ID for the new VLAN.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VlanState.__new__(_VlanState)

        __props__.__dict__["dhcp_on"] = dhcp_on
        __props__.__dict__["fabric"] = fabric
        __props__.__dict__["mtu"] = mtu
        __props__.__dict__["name"] = name
        __props__.__dict__["space"] = space
        __props__.__dict__["vid"] = vid
        return Vlan(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="dhcpOn")
    def dhcp_on(self) -> pulumi.Output[bool]:
        """
        Boolean value. Whether or not DHCP should be managed on the new VLAN. This argument is computed if it's not set.
        """
        return pulumi.get(self, "dhcp_on")

    @property
    @pulumi.getter
    def fabric(self) -> pulumi.Output[str]:
        """
        The identifier (name or ID) of the fabric for the new VLAN.
        """
        return pulumi.get(self, "fabric")

    @property
    @pulumi.getter
    def mtu(self) -> pulumi.Output[int]:
        """
        The MTU to use on the new VLAN. This argument is computed if it's not set.
        """
        return pulumi.get(self, "mtu")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the new VLAN. This argument is computed if it's not set.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def space(self) -> pulumi.Output[str]:
        """
        The space of the new VLAN. Passing in an empty string (or the string `undefined`) will cause the VLAN to be placed in
        the `undefined` space. This argument is computed if it's not set.
        """
        return pulumi.get(self, "space")

    @property
    @pulumi.getter
    def vid(self) -> pulumi.Output[int]:
        """
        The traffic segregation ID for the new VLAN.
        """
        return pulumi.get(self, "vid")

