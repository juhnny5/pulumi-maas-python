# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'BlockDevicePartition',
    'InstanceAllocateParams',
    'InstanceDeployParams',
    'InstanceNetworkInterface',
    'SubnetIpRange',
    'VmHostMachineNetworkInterface',
    'VmHostMachineStorageDisk',
]

@pulumi.output_type
class BlockDevicePartition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sizeGigabytes":
            suggest = "size_gigabytes"
        elif key == "fsType":
            suggest = "fs_type"
        elif key == "mountOptions":
            suggest = "mount_options"
        elif key == "mountPoint":
            suggest = "mount_point"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BlockDevicePartition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BlockDevicePartition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BlockDevicePartition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 size_gigabytes: int,
                 bootable: Optional[bool] = None,
                 fs_type: Optional[str] = None,
                 label: Optional[str] = None,
                 mount_options: Optional[str] = None,
                 mount_point: Optional[str] = None,
                 path: Optional[str] = None,
                 tags: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "size_gigabytes", size_gigabytes)
        if bootable is not None:
            pulumi.set(__self__, "bootable", bootable)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if mount_options is not None:
            pulumi.set(__self__, "mount_options", mount_options)
        if mount_point is not None:
            pulumi.set(__self__, "mount_point", mount_point)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="sizeGigabytes")
    def size_gigabytes(self) -> int:
        return pulumi.get(self, "size_gigabytes")

    @property
    @pulumi.getter
    def bootable(self) -> Optional[bool]:
        return pulumi.get(self, "bootable")

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[str]:
        return pulumi.get(self, "fs_type")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="mountOptions")
    def mount_options(self) -> Optional[str]:
        return pulumi.get(self, "mount_options")

    @property
    @pulumi.getter(name="mountPoint")
    def mount_point(self) -> Optional[str]:
        return pulumi.get(self, "mount_point")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tags")


@pulumi.output_type
class InstanceAllocateParams(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "minCpuCount":
            suggest = "min_cpu_count"
        elif key == "minMemory":
            suggest = "min_memory"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceAllocateParams. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceAllocateParams.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceAllocateParams.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 hostname: Optional[str] = None,
                 min_cpu_count: Optional[int] = None,
                 min_memory: Optional[int] = None,
                 pool: Optional[str] = None,
                 tags: Optional[Sequence[str]] = None,
                 zone: Optional[str] = None):
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if min_cpu_count is not None:
            pulumi.set(__self__, "min_cpu_count", min_cpu_count)
        if min_memory is not None:
            pulumi.set(__self__, "min_memory", min_memory)
        if pool is not None:
            pulumi.set(__self__, "pool", pool)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="minCpuCount")
    def min_cpu_count(self) -> Optional[int]:
        return pulumi.get(self, "min_cpu_count")

    @property
    @pulumi.getter(name="minMemory")
    def min_memory(self) -> Optional[int]:
        return pulumi.get(self, "min_memory")

    @property
    @pulumi.getter
    def pool(self) -> Optional[str]:
        return pulumi.get(self, "pool")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def zone(self) -> Optional[str]:
        return pulumi.get(self, "zone")


@pulumi.output_type
class InstanceDeployParams(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "distroSeries":
            suggest = "distro_series"
        elif key == "enableHwSync":
            suggest = "enable_hw_sync"
        elif key == "hweKernel":
            suggest = "hwe_kernel"
        elif key == "userData":
            suggest = "user_data"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceDeployParams. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceDeployParams.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceDeployParams.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 distro_series: Optional[str] = None,
                 enable_hw_sync: Optional[bool] = None,
                 hwe_kernel: Optional[str] = None,
                 user_data: Optional[str] = None):
        if distro_series is not None:
            pulumi.set(__self__, "distro_series", distro_series)
        if enable_hw_sync is not None:
            pulumi.set(__self__, "enable_hw_sync", enable_hw_sync)
        if hwe_kernel is not None:
            pulumi.set(__self__, "hwe_kernel", hwe_kernel)
        if user_data is not None:
            pulumi.set(__self__, "user_data", user_data)

    @property
    @pulumi.getter(name="distroSeries")
    def distro_series(self) -> Optional[str]:
        return pulumi.get(self, "distro_series")

    @property
    @pulumi.getter(name="enableHwSync")
    def enable_hw_sync(self) -> Optional[bool]:
        return pulumi.get(self, "enable_hw_sync")

    @property
    @pulumi.getter(name="hweKernel")
    def hwe_kernel(self) -> Optional[str]:
        return pulumi.get(self, "hwe_kernel")

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[str]:
        return pulumi.get(self, "user_data")


@pulumi.output_type
class InstanceNetworkInterface(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipAddress":
            suggest = "ip_address"
        elif key == "subnetCidr":
            suggest = "subnet_cidr"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceNetworkInterface. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceNetworkInterface.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceNetworkInterface.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 ip_address: Optional[str] = None,
                 subnet_cidr: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if subnet_cidr is not None:
            pulumi.set(__self__, "subnet_cidr", subnet_cidr)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="subnetCidr")
    def subnet_cidr(self) -> Optional[str]:
        return pulumi.get(self, "subnet_cidr")


@pulumi.output_type
class SubnetIpRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endIp":
            suggest = "end_ip"
        elif key == "startIp":
            suggest = "start_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SubnetIpRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SubnetIpRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SubnetIpRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_ip: str,
                 start_ip: str,
                 type: str,
                 comment: Optional[str] = None):
        pulumi.set(__self__, "end_ip", end_ip)
        pulumi.set(__self__, "start_ip", start_ip)
        pulumi.set(__self__, "type", type)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)

    @property
    @pulumi.getter(name="endIp")
    def end_ip(self) -> str:
        return pulumi.get(self, "end_ip")

    @property
    @pulumi.getter(name="startIp")
    def start_ip(self) -> str:
        return pulumi.get(self, "start_ip")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")


@pulumi.output_type
class VmHostMachineNetworkInterface(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipAddress":
            suggest = "ip_address"
        elif key == "subnetCidr":
            suggest = "subnet_cidr"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VmHostMachineNetworkInterface. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VmHostMachineNetworkInterface.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VmHostMachineNetworkInterface.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 fabric: Optional[str] = None,
                 ip_address: Optional[str] = None,
                 subnet_cidr: Optional[str] = None,
                 vlan: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        if fabric is not None:
            pulumi.set(__self__, "fabric", fabric)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if subnet_cidr is not None:
            pulumi.set(__self__, "subnet_cidr", subnet_cidr)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def fabric(self) -> Optional[str]:
        return pulumi.get(self, "fabric")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="subnetCidr")
    def subnet_cidr(self) -> Optional[str]:
        return pulumi.get(self, "subnet_cidr")

    @property
    @pulumi.getter
    def vlan(self) -> Optional[str]:
        return pulumi.get(self, "vlan")


@pulumi.output_type
class VmHostMachineStorageDisk(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sizeGigabytes":
            suggest = "size_gigabytes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VmHostMachineStorageDisk. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VmHostMachineStorageDisk.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VmHostMachineStorageDisk.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 size_gigabytes: int,
                 pool: Optional[str] = None):
        pulumi.set(__self__, "size_gigabytes", size_gigabytes)
        if pool is not None:
            pulumi.set(__self__, "pool", pool)

    @property
    @pulumi.getter(name="sizeGigabytes")
    def size_gigabytes(self) -> int:
        return pulumi.get(self, "size_gigabytes")

    @property
    @pulumi.getter
    def pool(self) -> Optional[str]:
        return pulumi.get(self, "pool")


