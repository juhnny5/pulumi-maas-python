# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'BlockDevicePartitionArgs',
    'InstanceAllocateParamsArgs',
    'InstanceDeployParamsArgs',
    'InstanceNetworkInterfaceArgs',
    'SubnetIpRangeArgs',
    'VmHostMachineNetworkInterfaceArgs',
    'VmHostMachineStorageDiskArgs',
]

@pulumi.input_type
class BlockDevicePartitionArgs:
    def __init__(__self__, *,
                 size_gigabytes: pulumi.Input[int],
                 bootable: Optional[pulumi.Input[bool]] = None,
                 fs_type: Optional[pulumi.Input[str]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 mount_options: Optional[pulumi.Input[str]] = None,
                 mount_point: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "size_gigabytes", size_gigabytes)
        if bootable is not None:
            pulumi.set(__self__, "bootable", bootable)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if mount_options is not None:
            pulumi.set(__self__, "mount_options", mount_options)
        if mount_point is not None:
            pulumi.set(__self__, "mount_point", mount_point)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="sizeGigabytes")
    def size_gigabytes(self) -> pulumi.Input[int]:
        return pulumi.get(self, "size_gigabytes")

    @size_gigabytes.setter
    def size_gigabytes(self, value: pulumi.Input[int]):
        pulumi.set(self, "size_gigabytes", value)

    @property
    @pulumi.getter
    def bootable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "bootable")

    @bootable.setter
    def bootable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "bootable", value)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter(name="mountOptions")
    def mount_options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mount_options")

    @mount_options.setter
    def mount_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_options", value)

    @property
    @pulumi.getter(name="mountPoint")
    def mount_point(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mount_point")

    @mount_point.setter
    def mount_point(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_point", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class InstanceAllocateParamsArgs:
    def __init__(__self__, *,
                 hostname: Optional[pulumi.Input[str]] = None,
                 min_cpu_count: Optional[pulumi.Input[int]] = None,
                 min_memory: Optional[pulumi.Input[int]] = None,
                 pool: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if min_cpu_count is not None:
            pulumi.set(__self__, "min_cpu_count", min_cpu_count)
        if min_memory is not None:
            pulumi.set(__self__, "min_memory", min_memory)
        if pool is not None:
            pulumi.set(__self__, "pool", pool)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter(name="minCpuCount")
    def min_cpu_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_cpu_count")

    @min_cpu_count.setter
    def min_cpu_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_cpu_count", value)

    @property
    @pulumi.getter(name="minMemory")
    def min_memory(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_memory")

    @min_memory.setter
    def min_memory(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_memory", value)

    @property
    @pulumi.getter
    def pool(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pool")

    @pool.setter
    def pool(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pool", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


@pulumi.input_type
class InstanceDeployParamsArgs:
    def __init__(__self__, *,
                 distro_series: Optional[pulumi.Input[str]] = None,
                 enable_hw_sync: Optional[pulumi.Input[bool]] = None,
                 hwe_kernel: Optional[pulumi.Input[str]] = None,
                 user_data: Optional[pulumi.Input[str]] = None):
        if distro_series is not None:
            pulumi.set(__self__, "distro_series", distro_series)
        if enable_hw_sync is not None:
            pulumi.set(__self__, "enable_hw_sync", enable_hw_sync)
        if hwe_kernel is not None:
            pulumi.set(__self__, "hwe_kernel", hwe_kernel)
        if user_data is not None:
            pulumi.set(__self__, "user_data", user_data)

    @property
    @pulumi.getter(name="distroSeries")
    def distro_series(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "distro_series")

    @distro_series.setter
    def distro_series(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "distro_series", value)

    @property
    @pulumi.getter(name="enableHwSync")
    def enable_hw_sync(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_hw_sync")

    @enable_hw_sync.setter
    def enable_hw_sync(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_hw_sync", value)

    @property
    @pulumi.getter(name="hweKernel")
    def hwe_kernel(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hwe_kernel")

    @hwe_kernel.setter
    def hwe_kernel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hwe_kernel", value)

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_data")

    @user_data.setter
    def user_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_data", value)


@pulumi.input_type
class InstanceNetworkInterfaceArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 ip_address: Optional[pulumi.Input[str]] = None,
                 subnet_cidr: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "name", name)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if subnet_cidr is not None:
            pulumi.set(__self__, "subnet_cidr", subnet_cidr)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter(name="subnetCidr")
    def subnet_cidr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subnet_cidr")

    @subnet_cidr.setter
    def subnet_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_cidr", value)


@pulumi.input_type
class SubnetIpRangeArgs:
    def __init__(__self__, *,
                 end_ip: pulumi.Input[str],
                 start_ip: pulumi.Input[str],
                 type: pulumi.Input[str],
                 comment: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "end_ip", end_ip)
        pulumi.set(__self__, "start_ip", start_ip)
        pulumi.set(__self__, "type", type)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)

    @property
    @pulumi.getter(name="endIp")
    def end_ip(self) -> pulumi.Input[str]:
        return pulumi.get(self, "end_ip")

    @end_ip.setter
    def end_ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "end_ip", value)

    @property
    @pulumi.getter(name="startIp")
    def start_ip(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_ip")

    @start_ip.setter
    def start_ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_ip", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)


@pulumi.input_type
class VmHostMachineNetworkInterfaceArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 fabric: Optional[pulumi.Input[str]] = None,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 subnet_cidr: Optional[pulumi.Input[str]] = None,
                 vlan: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "name", name)
        if fabric is not None:
            pulumi.set(__self__, "fabric", fabric)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if subnet_cidr is not None:
            pulumi.set(__self__, "subnet_cidr", subnet_cidr)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def fabric(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fabric")

    @fabric.setter
    def fabric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fabric", value)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter(name="subnetCidr")
    def subnet_cidr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subnet_cidr")

    @subnet_cidr.setter
    def subnet_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_cidr", value)

    @property
    @pulumi.getter
    def vlan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vlan")

    @vlan.setter
    def vlan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan", value)


@pulumi.input_type
class VmHostMachineStorageDiskArgs:
    def __init__(__self__, *,
                 size_gigabytes: pulumi.Input[int],
                 pool: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "size_gigabytes", size_gigabytes)
        if pool is not None:
            pulumi.set(__self__, "pool", pool)

    @property
    @pulumi.getter(name="sizeGigabytes")
    def size_gigabytes(self) -> pulumi.Input[int]:
        return pulumi.get(self, "size_gigabytes")

    @size_gigabytes.setter
    def size_gigabytes(self, value: pulumi.Input[int]):
        pulumi.set(self, "size_gigabytes", value)

    @property
    @pulumi.getter
    def pool(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pool")

    @pool.setter
    def pool(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pool", value)


