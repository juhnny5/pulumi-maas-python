# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['SubnetIpRangeInitArgs', 'SubnetIpRange']

@pulumi.input_type
class SubnetIpRangeInitArgs:
    def __init__(__self__, *,
                 end_ip: pulumi.Input[str],
                 start_ip: pulumi.Input[str],
                 subnet: pulumi.Input[str],
                 type: pulumi.Input[str],
                 comment: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SubnetIpRange resource.
        :param pulumi.Input[str] end_ip: The end IP for the new IP range (inclusive).
        :param pulumi.Input[str] start_ip: The start IP for the new IP range (inclusive).
        :param pulumi.Input[str] subnet: The subnet identifier (ID or CIDR) for the new IP range.
        :param pulumi.Input[str] type: The IP range type. Valid options are: `dynamic`, `reserved`.
        :param pulumi.Input[str] comment: A description of this range. This argument is computed if it's not set.
        """
        pulumi.set(__self__, "end_ip", end_ip)
        pulumi.set(__self__, "start_ip", start_ip)
        pulumi.set(__self__, "subnet", subnet)
        pulumi.set(__self__, "type", type)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)

    @property
    @pulumi.getter(name="endIp")
    def end_ip(self) -> pulumi.Input[str]:
        """
        The end IP for the new IP range (inclusive).
        """
        return pulumi.get(self, "end_ip")

    @end_ip.setter
    def end_ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "end_ip", value)

    @property
    @pulumi.getter(name="startIp")
    def start_ip(self) -> pulumi.Input[str]:
        """
        The start IP for the new IP range (inclusive).
        """
        return pulumi.get(self, "start_ip")

    @start_ip.setter
    def start_ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_ip", value)

    @property
    @pulumi.getter
    def subnet(self) -> pulumi.Input[str]:
        """
        The subnet identifier (ID or CIDR) for the new IP range.
        """
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The IP range type. Valid options are: `dynamic`, `reserved`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        A description of this range. This argument is computed if it's not set.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)


@pulumi.input_type
class _SubnetIpRangeState:
    def __init__(__self__, *,
                 comment: Optional[pulumi.Input[str]] = None,
                 end_ip: Optional[pulumi.Input[str]] = None,
                 start_ip: Optional[pulumi.Input[str]] = None,
                 subnet: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SubnetIpRange resources.
        :param pulumi.Input[str] comment: A description of this range. This argument is computed if it's not set.
        :param pulumi.Input[str] end_ip: The end IP for the new IP range (inclusive).
        :param pulumi.Input[str] start_ip: The start IP for the new IP range (inclusive).
        :param pulumi.Input[str] subnet: The subnet identifier (ID or CIDR) for the new IP range.
        :param pulumi.Input[str] type: The IP range type. Valid options are: `dynamic`, `reserved`.
        """
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if end_ip is not None:
            pulumi.set(__self__, "end_ip", end_ip)
        if start_ip is not None:
            pulumi.set(__self__, "start_ip", start_ip)
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        A description of this range. This argument is computed if it's not set.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="endIp")
    def end_ip(self) -> Optional[pulumi.Input[str]]:
        """
        The end IP for the new IP range (inclusive).
        """
        return pulumi.get(self, "end_ip")

    @end_ip.setter
    def end_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_ip", value)

    @property
    @pulumi.getter(name="startIp")
    def start_ip(self) -> Optional[pulumi.Input[str]]:
        """
        The start IP for the new IP range (inclusive).
        """
        return pulumi.get(self, "start_ip")

    @start_ip.setter
    def start_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_ip", value)

    @property
    @pulumi.getter
    def subnet(self) -> Optional[pulumi.Input[str]]:
        """
        The subnet identifier (ID or CIDR) for the new IP range.
        """
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The IP range type. Valid options are: `dynamic`, `reserved`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


class SubnetIpRange(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 end_ip: Optional[pulumi.Input[str]] = None,
                 start_ip: Optional[pulumi.Input[str]] = None,
                 subnet: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a SubnetIpRange resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] comment: A description of this range. This argument is computed if it's not set.
        :param pulumi.Input[str] end_ip: The end IP for the new IP range (inclusive).
        :param pulumi.Input[str] start_ip: The start IP for the new IP range (inclusive).
        :param pulumi.Input[str] subnet: The subnet identifier (ID or CIDR) for the new IP range.
        :param pulumi.Input[str] type: The IP range type. Valid options are: `dynamic`, `reserved`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SubnetIpRangeInitArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SubnetIpRange resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SubnetIpRangeInitArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SubnetIpRangeInitArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 end_ip: Optional[pulumi.Input[str]] = None,
                 start_ip: Optional[pulumi.Input[str]] = None,
                 subnet: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SubnetIpRangeInitArgs.__new__(SubnetIpRangeInitArgs)

            __props__.__dict__["comment"] = comment
            if end_ip is None and not opts.urn:
                raise TypeError("Missing required property 'end_ip'")
            __props__.__dict__["end_ip"] = end_ip
            if start_ip is None and not opts.urn:
                raise TypeError("Missing required property 'start_ip'")
            __props__.__dict__["start_ip"] = start_ip
            if subnet is None and not opts.urn:
                raise TypeError("Missing required property 'subnet'")
            __props__.__dict__["subnet"] = subnet
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
        super(SubnetIpRange, __self__).__init__(
            'maas:index/subnetIpRange:SubnetIpRange',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            comment: Optional[pulumi.Input[str]] = None,
            end_ip: Optional[pulumi.Input[str]] = None,
            start_ip: Optional[pulumi.Input[str]] = None,
            subnet: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None) -> 'SubnetIpRange':
        """
        Get an existing SubnetIpRange resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] comment: A description of this range. This argument is computed if it's not set.
        :param pulumi.Input[str] end_ip: The end IP for the new IP range (inclusive).
        :param pulumi.Input[str] start_ip: The start IP for the new IP range (inclusive).
        :param pulumi.Input[str] subnet: The subnet identifier (ID or CIDR) for the new IP range.
        :param pulumi.Input[str] type: The IP range type. Valid options are: `dynamic`, `reserved`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SubnetIpRangeState.__new__(_SubnetIpRangeState)

        __props__.__dict__["comment"] = comment
        __props__.__dict__["end_ip"] = end_ip
        __props__.__dict__["start_ip"] = start_ip
        __props__.__dict__["subnet"] = subnet
        __props__.__dict__["type"] = type
        return SubnetIpRange(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[str]:
        """
        A description of this range. This argument is computed if it's not set.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="endIp")
    def end_ip(self) -> pulumi.Output[str]:
        """
        The end IP for the new IP range (inclusive).
        """
        return pulumi.get(self, "end_ip")

    @property
    @pulumi.getter(name="startIp")
    def start_ip(self) -> pulumi.Output[str]:
        """
        The start IP for the new IP range (inclusive).
        """
        return pulumi.get(self, "start_ip")

    @property
    @pulumi.getter
    def subnet(self) -> pulumi.Output[str]:
        """
        The subnet identifier (ID or CIDR) for the new IP range.
        """
        return pulumi.get(self, "subnet")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The IP range type. Valid options are: `dynamic`, `reserved`.
        """
        return pulumi.get(self, "type")

