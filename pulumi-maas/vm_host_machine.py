# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['VmHostMachineArgs', 'VmHostMachine']

@pulumi.input_type
class VmHostMachineArgs:
    def __init__(__self__, *,
                 vm_host: pulumi.Input[str],
                 cores: Optional[pulumi.Input[int]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 memory: Optional[pulumi.Input[int]] = None,
                 network_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['VmHostMachineNetworkInterfaceArgs']]]] = None,
                 pinned_cores: Optional[pulumi.Input[int]] = None,
                 pool: Optional[pulumi.Input[str]] = None,
                 storage_disks: Optional[pulumi.Input[Sequence[pulumi.Input['VmHostMachineStorageDiskArgs']]]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a VmHostMachine resource.
        :param pulumi.Input[str] vm_host: ID or name of the VM host used to compose the new machine.
        :param pulumi.Input[int] cores: The number of CPU cores (defaults to 1).
        :param pulumi.Input[str] domain: The VM host machine domain. This is computed if it's not set.
        :param pulumi.Input[str] hostname: The VM host machine hostname. This is computed if it's not set.
        :param pulumi.Input[int] memory: The VM host machine RAM memory, specified in MB (defaults to 2048).
        :param pulumi.Input[Sequence[pulumi.Input['VmHostMachineNetworkInterfaceArgs']]] network_interfaces: A list of network interfaces for new the VM host. This argument only works when the VM host is deployed from a
               registered MAAS machine. Parameters defined below. This argument is processed in [attribute-as-blocks
               mode](https://www.terraform.io/docs/configuration/attr-as-blocks.html).
        :param pulumi.Input[int] pinned_cores: List of host CPU cores to pin the VM host machine to. If this is passed, the `cores` parameter is ignored.
        :param pulumi.Input[str] pool: The VM host machine pool. This is computed if it's not set.
        :param pulumi.Input[Sequence[pulumi.Input['VmHostMachineStorageDiskArgs']]] storage_disks: A list of storage disks for the new VM host. Parameters defined below. This argument is processed in
               [attribute-as-blocks mode](https://www.terraform.io/docs/configuration/attr-as-blocks.html).
        :param pulumi.Input[str] zone: The VM host machine zone. This is computed if it's not set.
        """
        pulumi.set(__self__, "vm_host", vm_host)
        if cores is not None:
            pulumi.set(__self__, "cores", cores)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if network_interfaces is not None:
            pulumi.set(__self__, "network_interfaces", network_interfaces)
        if pinned_cores is not None:
            pulumi.set(__self__, "pinned_cores", pinned_cores)
        if pool is not None:
            pulumi.set(__self__, "pool", pool)
        if storage_disks is not None:
            pulumi.set(__self__, "storage_disks", storage_disks)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="vmHost")
    def vm_host(self) -> pulumi.Input[str]:
        """
        ID or name of the VM host used to compose the new machine.
        """
        return pulumi.get(self, "vm_host")

    @vm_host.setter
    def vm_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "vm_host", value)

    @property
    @pulumi.getter
    def cores(self) -> Optional[pulumi.Input[int]]:
        """
        The number of CPU cores (defaults to 1).
        """
        return pulumi.get(self, "cores")

    @cores.setter
    def cores(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cores", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        The VM host machine domain. This is computed if it's not set.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        """
        The VM host machine hostname. This is computed if it's not set.
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[int]]:
        """
        The VM host machine RAM memory, specified in MB (defaults to 2048).
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory", value)

    @property
    @pulumi.getter(name="networkInterfaces")
    def network_interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmHostMachineNetworkInterfaceArgs']]]]:
        """
        A list of network interfaces for new the VM host. This argument only works when the VM host is deployed from a
        registered MAAS machine. Parameters defined below. This argument is processed in [attribute-as-blocks
        mode](https://www.terraform.io/docs/configuration/attr-as-blocks.html).
        """
        return pulumi.get(self, "network_interfaces")

    @network_interfaces.setter
    def network_interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmHostMachineNetworkInterfaceArgs']]]]):
        pulumi.set(self, "network_interfaces", value)

    @property
    @pulumi.getter(name="pinnedCores")
    def pinned_cores(self) -> Optional[pulumi.Input[int]]:
        """
        List of host CPU cores to pin the VM host machine to. If this is passed, the `cores` parameter is ignored.
        """
        return pulumi.get(self, "pinned_cores")

    @pinned_cores.setter
    def pinned_cores(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pinned_cores", value)

    @property
    @pulumi.getter
    def pool(self) -> Optional[pulumi.Input[str]]:
        """
        The VM host machine pool. This is computed if it's not set.
        """
        return pulumi.get(self, "pool")

    @pool.setter
    def pool(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pool", value)

    @property
    @pulumi.getter(name="storageDisks")
    def storage_disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmHostMachineStorageDiskArgs']]]]:
        """
        A list of storage disks for the new VM host. Parameters defined below. This argument is processed in
        [attribute-as-blocks mode](https://www.terraform.io/docs/configuration/attr-as-blocks.html).
        """
        return pulumi.get(self, "storage_disks")

    @storage_disks.setter
    def storage_disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmHostMachineStorageDiskArgs']]]]):
        pulumi.set(self, "storage_disks", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        """
        The VM host machine zone. This is computed if it's not set.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


@pulumi.input_type
class _VmHostMachineState:
    def __init__(__self__, *,
                 cores: Optional[pulumi.Input[int]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 memory: Optional[pulumi.Input[int]] = None,
                 network_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['VmHostMachineNetworkInterfaceArgs']]]] = None,
                 pinned_cores: Optional[pulumi.Input[int]] = None,
                 pool: Optional[pulumi.Input[str]] = None,
                 storage_disks: Optional[pulumi.Input[Sequence[pulumi.Input['VmHostMachineStorageDiskArgs']]]] = None,
                 vm_host: Optional[pulumi.Input[str]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering VmHostMachine resources.
        :param pulumi.Input[int] cores: The number of CPU cores (defaults to 1).
        :param pulumi.Input[str] domain: The VM host machine domain. This is computed if it's not set.
        :param pulumi.Input[str] hostname: The VM host machine hostname. This is computed if it's not set.
        :param pulumi.Input[int] memory: The VM host machine RAM memory, specified in MB (defaults to 2048).
        :param pulumi.Input[Sequence[pulumi.Input['VmHostMachineNetworkInterfaceArgs']]] network_interfaces: A list of network interfaces for new the VM host. This argument only works when the VM host is deployed from a
               registered MAAS machine. Parameters defined below. This argument is processed in [attribute-as-blocks
               mode](https://www.terraform.io/docs/configuration/attr-as-blocks.html).
        :param pulumi.Input[int] pinned_cores: List of host CPU cores to pin the VM host machine to. If this is passed, the `cores` parameter is ignored.
        :param pulumi.Input[str] pool: The VM host machine pool. This is computed if it's not set.
        :param pulumi.Input[Sequence[pulumi.Input['VmHostMachineStorageDiskArgs']]] storage_disks: A list of storage disks for the new VM host. Parameters defined below. This argument is processed in
               [attribute-as-blocks mode](https://www.terraform.io/docs/configuration/attr-as-blocks.html).
        :param pulumi.Input[str] vm_host: ID or name of the VM host used to compose the new machine.
        :param pulumi.Input[str] zone: The VM host machine zone. This is computed if it's not set.
        """
        if cores is not None:
            pulumi.set(__self__, "cores", cores)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if network_interfaces is not None:
            pulumi.set(__self__, "network_interfaces", network_interfaces)
        if pinned_cores is not None:
            pulumi.set(__self__, "pinned_cores", pinned_cores)
        if pool is not None:
            pulumi.set(__self__, "pool", pool)
        if storage_disks is not None:
            pulumi.set(__self__, "storage_disks", storage_disks)
        if vm_host is not None:
            pulumi.set(__self__, "vm_host", vm_host)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter
    def cores(self) -> Optional[pulumi.Input[int]]:
        """
        The number of CPU cores (defaults to 1).
        """
        return pulumi.get(self, "cores")

    @cores.setter
    def cores(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cores", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        The VM host machine domain. This is computed if it's not set.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        """
        The VM host machine hostname. This is computed if it's not set.
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[int]]:
        """
        The VM host machine RAM memory, specified in MB (defaults to 2048).
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory", value)

    @property
    @pulumi.getter(name="networkInterfaces")
    def network_interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmHostMachineNetworkInterfaceArgs']]]]:
        """
        A list of network interfaces for new the VM host. This argument only works when the VM host is deployed from a
        registered MAAS machine. Parameters defined below. This argument is processed in [attribute-as-blocks
        mode](https://www.terraform.io/docs/configuration/attr-as-blocks.html).
        """
        return pulumi.get(self, "network_interfaces")

    @network_interfaces.setter
    def network_interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmHostMachineNetworkInterfaceArgs']]]]):
        pulumi.set(self, "network_interfaces", value)

    @property
    @pulumi.getter(name="pinnedCores")
    def pinned_cores(self) -> Optional[pulumi.Input[int]]:
        """
        List of host CPU cores to pin the VM host machine to. If this is passed, the `cores` parameter is ignored.
        """
        return pulumi.get(self, "pinned_cores")

    @pinned_cores.setter
    def pinned_cores(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pinned_cores", value)

    @property
    @pulumi.getter
    def pool(self) -> Optional[pulumi.Input[str]]:
        """
        The VM host machine pool. This is computed if it's not set.
        """
        return pulumi.get(self, "pool")

    @pool.setter
    def pool(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pool", value)

    @property
    @pulumi.getter(name="storageDisks")
    def storage_disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmHostMachineStorageDiskArgs']]]]:
        """
        A list of storage disks for the new VM host. Parameters defined below. This argument is processed in
        [attribute-as-blocks mode](https://www.terraform.io/docs/configuration/attr-as-blocks.html).
        """
        return pulumi.get(self, "storage_disks")

    @storage_disks.setter
    def storage_disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmHostMachineStorageDiskArgs']]]]):
        pulumi.set(self, "storage_disks", value)

    @property
    @pulumi.getter(name="vmHost")
    def vm_host(self) -> Optional[pulumi.Input[str]]:
        """
        ID or name of the VM host used to compose the new machine.
        """
        return pulumi.get(self, "vm_host")

    @vm_host.setter
    def vm_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vm_host", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        """
        The VM host machine zone. This is computed if it's not set.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


class VmHostMachine(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cores: Optional[pulumi.Input[int]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 memory: Optional[pulumi.Input[int]] = None,
                 network_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmHostMachineNetworkInterfaceArgs']]]]] = None,
                 pinned_cores: Optional[pulumi.Input[int]] = None,
                 pool: Optional[pulumi.Input[str]] = None,
                 storage_disks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmHostMachineStorageDiskArgs']]]]] = None,
                 vm_host: Optional[pulumi.Input[str]] = None,
                 zone: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a VmHostMachine resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] cores: The number of CPU cores (defaults to 1).
        :param pulumi.Input[str] domain: The VM host machine domain. This is computed if it's not set.
        :param pulumi.Input[str] hostname: The VM host machine hostname. This is computed if it's not set.
        :param pulumi.Input[int] memory: The VM host machine RAM memory, specified in MB (defaults to 2048).
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmHostMachineNetworkInterfaceArgs']]]] network_interfaces: A list of network interfaces for new the VM host. This argument only works when the VM host is deployed from a
               registered MAAS machine. Parameters defined below. This argument is processed in [attribute-as-blocks
               mode](https://www.terraform.io/docs/configuration/attr-as-blocks.html).
        :param pulumi.Input[int] pinned_cores: List of host CPU cores to pin the VM host machine to. If this is passed, the `cores` parameter is ignored.
        :param pulumi.Input[str] pool: The VM host machine pool. This is computed if it's not set.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmHostMachineStorageDiskArgs']]]] storage_disks: A list of storage disks for the new VM host. Parameters defined below. This argument is processed in
               [attribute-as-blocks mode](https://www.terraform.io/docs/configuration/attr-as-blocks.html).
        :param pulumi.Input[str] vm_host: ID or name of the VM host used to compose the new machine.
        :param pulumi.Input[str] zone: The VM host machine zone. This is computed if it's not set.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VmHostMachineArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a VmHostMachine resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param VmHostMachineArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VmHostMachineArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cores: Optional[pulumi.Input[int]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 memory: Optional[pulumi.Input[int]] = None,
                 network_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmHostMachineNetworkInterfaceArgs']]]]] = None,
                 pinned_cores: Optional[pulumi.Input[int]] = None,
                 pool: Optional[pulumi.Input[str]] = None,
                 storage_disks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmHostMachineStorageDiskArgs']]]]] = None,
                 vm_host: Optional[pulumi.Input[str]] = None,
                 zone: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VmHostMachineArgs.__new__(VmHostMachineArgs)

            __props__.__dict__["cores"] = cores
            __props__.__dict__["domain"] = domain
            __props__.__dict__["hostname"] = hostname
            __props__.__dict__["memory"] = memory
            __props__.__dict__["network_interfaces"] = network_interfaces
            __props__.__dict__["pinned_cores"] = pinned_cores
            __props__.__dict__["pool"] = pool
            __props__.__dict__["storage_disks"] = storage_disks
            if vm_host is None and not opts.urn:
                raise TypeError("Missing required property 'vm_host'")
            __props__.__dict__["vm_host"] = vm_host
            __props__.__dict__["zone"] = zone
        super(VmHostMachine, __self__).__init__(
            'maas:index/vmHostMachine:VmHostMachine',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cores: Optional[pulumi.Input[int]] = None,
            domain: Optional[pulumi.Input[str]] = None,
            hostname: Optional[pulumi.Input[str]] = None,
            memory: Optional[pulumi.Input[int]] = None,
            network_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmHostMachineNetworkInterfaceArgs']]]]] = None,
            pinned_cores: Optional[pulumi.Input[int]] = None,
            pool: Optional[pulumi.Input[str]] = None,
            storage_disks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmHostMachineStorageDiskArgs']]]]] = None,
            vm_host: Optional[pulumi.Input[str]] = None,
            zone: Optional[pulumi.Input[str]] = None) -> 'VmHostMachine':
        """
        Get an existing VmHostMachine resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] cores: The number of CPU cores (defaults to 1).
        :param pulumi.Input[str] domain: The VM host machine domain. This is computed if it's not set.
        :param pulumi.Input[str] hostname: The VM host machine hostname. This is computed if it's not set.
        :param pulumi.Input[int] memory: The VM host machine RAM memory, specified in MB (defaults to 2048).
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmHostMachineNetworkInterfaceArgs']]]] network_interfaces: A list of network interfaces for new the VM host. This argument only works when the VM host is deployed from a
               registered MAAS machine. Parameters defined below. This argument is processed in [attribute-as-blocks
               mode](https://www.terraform.io/docs/configuration/attr-as-blocks.html).
        :param pulumi.Input[int] pinned_cores: List of host CPU cores to pin the VM host machine to. If this is passed, the `cores` parameter is ignored.
        :param pulumi.Input[str] pool: The VM host machine pool. This is computed if it's not set.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmHostMachineStorageDiskArgs']]]] storage_disks: A list of storage disks for the new VM host. Parameters defined below. This argument is processed in
               [attribute-as-blocks mode](https://www.terraform.io/docs/configuration/attr-as-blocks.html).
        :param pulumi.Input[str] vm_host: ID or name of the VM host used to compose the new machine.
        :param pulumi.Input[str] zone: The VM host machine zone. This is computed if it's not set.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VmHostMachineState.__new__(_VmHostMachineState)

        __props__.__dict__["cores"] = cores
        __props__.__dict__["domain"] = domain
        __props__.__dict__["hostname"] = hostname
        __props__.__dict__["memory"] = memory
        __props__.__dict__["network_interfaces"] = network_interfaces
        __props__.__dict__["pinned_cores"] = pinned_cores
        __props__.__dict__["pool"] = pool
        __props__.__dict__["storage_disks"] = storage_disks
        __props__.__dict__["vm_host"] = vm_host
        __props__.__dict__["zone"] = zone
        return VmHostMachine(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def cores(self) -> pulumi.Output[Optional[int]]:
        """
        The number of CPU cores (defaults to 1).
        """
        return pulumi.get(self, "cores")

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Output[str]:
        """
        The VM host machine domain. This is computed if it's not set.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Output[str]:
        """
        The VM host machine hostname. This is computed if it's not set.
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def memory(self) -> pulumi.Output[Optional[int]]:
        """
        The VM host machine RAM memory, specified in MB (defaults to 2048).
        """
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter(name="networkInterfaces")
    def network_interfaces(self) -> pulumi.Output[Optional[Sequence['outputs.VmHostMachineNetworkInterface']]]:
        """
        A list of network interfaces for new the VM host. This argument only works when the VM host is deployed from a
        registered MAAS machine. Parameters defined below. This argument is processed in [attribute-as-blocks
        mode](https://www.terraform.io/docs/configuration/attr-as-blocks.html).
        """
        return pulumi.get(self, "network_interfaces")

    @property
    @pulumi.getter(name="pinnedCores")
    def pinned_cores(self) -> pulumi.Output[Optional[int]]:
        """
        List of host CPU cores to pin the VM host machine to. If this is passed, the `cores` parameter is ignored.
        """
        return pulumi.get(self, "pinned_cores")

    @property
    @pulumi.getter
    def pool(self) -> pulumi.Output[str]:
        """
        The VM host machine pool. This is computed if it's not set.
        """
        return pulumi.get(self, "pool")

    @property
    @pulumi.getter(name="storageDisks")
    def storage_disks(self) -> pulumi.Output[Optional[Sequence['outputs.VmHostMachineStorageDisk']]]:
        """
        A list of storage disks for the new VM host. Parameters defined below. This argument is processed in
        [attribute-as-blocks mode](https://www.terraform.io/docs/configuration/attr-as-blocks.html).
        """
        return pulumi.get(self, "storage_disks")

    @property
    @pulumi.getter(name="vmHost")
    def vm_host(self) -> pulumi.Output[str]:
        """
        ID or name of the VM host used to compose the new machine.
        """
        return pulumi.get(self, "vm_host")

    @property
    @pulumi.getter
    def zone(self) -> pulumi.Output[str]:
        """
        The VM host machine zone. This is computed if it's not set.
        """
        return pulumi.get(self, "zone")

