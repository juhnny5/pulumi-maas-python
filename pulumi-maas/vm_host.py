# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['VmHostArgs', 'VmHost']

@pulumi.input_type
class VmHostArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cpu_over_commit_ratio: Optional[pulumi.Input[float]] = None,
                 default_macvlan_mode: Optional[pulumi.Input[str]] = None,
                 machine: Optional[pulumi.Input[str]] = None,
                 memory_over_commit_ratio: Optional[pulumi.Input[float]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pool: Optional[pulumi.Input[str]] = None,
                 power_address: Optional[pulumi.Input[str]] = None,
                 power_pass: Optional[pulumi.Input[str]] = None,
                 power_user: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a VmHost resource.
        :param pulumi.Input[str] type: The VM host type. Supported values are: `lxd`, `virsh`.
        :param pulumi.Input[float] cpu_over_commit_ratio: The new VM host CPU overcommit ratio. This is computed if it's not set.
        :param pulumi.Input[str] default_macvlan_mode: The new VM host default macvlan mode. Supported values are: `bridge`, `passthru`, `private`, `vepa`. This is computed if
               it's not set.
        :param pulumi.Input[str] machine: The identifier (hostname, FQDN or system ID) of a registered ready MAAS machine. This is going to be deployed and
               registered as a new VM host. This argument conflicts with: `power_address`, `power_user`, `power_pass`.
        :param pulumi.Input[float] memory_over_commit_ratio: The new VM host RAM memory overcommit ratio. This is computed if it's not set.
        :param pulumi.Input[str] name: The new VM host name. This is computed if it's not set.
        :param pulumi.Input[str] pool: The new VM host pool name. This is computed if it's not set.
        :param pulumi.Input[str] power_address: Address that gives MAAS access to the VM host power control. For example: `qemu+ssh://172.16.99.2/system`. The address
               given here must reachable by the MAAS server. It can't be set if `machine` argument is used.
        :param pulumi.Input[str] power_pass: User password to use for power control of the VM host. Cannot be set if `machine` parameter is used.
        :param pulumi.Input[str] power_user: User name to use for power control of the VM host. Cannot be set if `machine` parameter is used.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: A set of tag names to assign to the new VM host. This is computed if it's not set.
        :param pulumi.Input[str] zone: The new VM host zone name. This is computed if it's not set.
        """
        pulumi.set(__self__, "type", type)
        if cpu_over_commit_ratio is not None:
            pulumi.set(__self__, "cpu_over_commit_ratio", cpu_over_commit_ratio)
        if default_macvlan_mode is not None:
            pulumi.set(__self__, "default_macvlan_mode", default_macvlan_mode)
        if machine is not None:
            pulumi.set(__self__, "machine", machine)
        if memory_over_commit_ratio is not None:
            pulumi.set(__self__, "memory_over_commit_ratio", memory_over_commit_ratio)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pool is not None:
            pulumi.set(__self__, "pool", pool)
        if power_address is not None:
            pulumi.set(__self__, "power_address", power_address)
        if power_pass is not None:
            pulumi.set(__self__, "power_pass", power_pass)
        if power_user is not None:
            pulumi.set(__self__, "power_user", power_user)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The VM host type. Supported values are: `lxd`, `virsh`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cpuOverCommitRatio")
    def cpu_over_commit_ratio(self) -> Optional[pulumi.Input[float]]:
        """
        The new VM host CPU overcommit ratio. This is computed if it's not set.
        """
        return pulumi.get(self, "cpu_over_commit_ratio")

    @cpu_over_commit_ratio.setter
    def cpu_over_commit_ratio(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "cpu_over_commit_ratio", value)

    @property
    @pulumi.getter(name="defaultMacvlanMode")
    def default_macvlan_mode(self) -> Optional[pulumi.Input[str]]:
        """
        The new VM host default macvlan mode. Supported values are: `bridge`, `passthru`, `private`, `vepa`. This is computed if
        it's not set.
        """
        return pulumi.get(self, "default_macvlan_mode")

    @default_macvlan_mode.setter
    def default_macvlan_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_macvlan_mode", value)

    @property
    @pulumi.getter
    def machine(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier (hostname, FQDN or system ID) of a registered ready MAAS machine. This is going to be deployed and
        registered as a new VM host. This argument conflicts with: `power_address`, `power_user`, `power_pass`.
        """
        return pulumi.get(self, "machine")

    @machine.setter
    def machine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "machine", value)

    @property
    @pulumi.getter(name="memoryOverCommitRatio")
    def memory_over_commit_ratio(self) -> Optional[pulumi.Input[float]]:
        """
        The new VM host RAM memory overcommit ratio. This is computed if it's not set.
        """
        return pulumi.get(self, "memory_over_commit_ratio")

    @memory_over_commit_ratio.setter
    def memory_over_commit_ratio(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "memory_over_commit_ratio", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The new VM host name. This is computed if it's not set.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def pool(self) -> Optional[pulumi.Input[str]]:
        """
        The new VM host pool name. This is computed if it's not set.
        """
        return pulumi.get(self, "pool")

    @pool.setter
    def pool(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pool", value)

    @property
    @pulumi.getter(name="powerAddress")
    def power_address(self) -> Optional[pulumi.Input[str]]:
        """
        Address that gives MAAS access to the VM host power control. For example: `qemu+ssh://172.16.99.2/system`. The address
        given here must reachable by the MAAS server. It can't be set if `machine` argument is used.
        """
        return pulumi.get(self, "power_address")

    @power_address.setter
    def power_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "power_address", value)

    @property
    @pulumi.getter(name="powerPass")
    def power_pass(self) -> Optional[pulumi.Input[str]]:
        """
        User password to use for power control of the VM host. Cannot be set if `machine` parameter is used.
        """
        return pulumi.get(self, "power_pass")

    @power_pass.setter
    def power_pass(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "power_pass", value)

    @property
    @pulumi.getter(name="powerUser")
    def power_user(self) -> Optional[pulumi.Input[str]]:
        """
        User name to use for power control of the VM host. Cannot be set if `machine` parameter is used.
        """
        return pulumi.get(self, "power_user")

    @power_user.setter
    def power_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "power_user", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A set of tag names to assign to the new VM host. This is computed if it's not set.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        """
        The new VM host zone name. This is computed if it's not set.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


@pulumi.input_type
class _VmHostState:
    def __init__(__self__, *,
                 cpu_over_commit_ratio: Optional[pulumi.Input[float]] = None,
                 default_macvlan_mode: Optional[pulumi.Input[str]] = None,
                 machine: Optional[pulumi.Input[str]] = None,
                 memory_over_commit_ratio: Optional[pulumi.Input[float]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pool: Optional[pulumi.Input[str]] = None,
                 power_address: Optional[pulumi.Input[str]] = None,
                 power_pass: Optional[pulumi.Input[str]] = None,
                 power_user: Optional[pulumi.Input[str]] = None,
                 resources_cores_total: Optional[pulumi.Input[int]] = None,
                 resources_local_storage_total: Optional[pulumi.Input[int]] = None,
                 resources_memory_total: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering VmHost resources.
        :param pulumi.Input[float] cpu_over_commit_ratio: The new VM host CPU overcommit ratio. This is computed if it's not set.
        :param pulumi.Input[str] default_macvlan_mode: The new VM host default macvlan mode. Supported values are: `bridge`, `passthru`, `private`, `vepa`. This is computed if
               it's not set.
        :param pulumi.Input[str] machine: The identifier (hostname, FQDN or system ID) of a registered ready MAAS machine. This is going to be deployed and
               registered as a new VM host. This argument conflicts with: `power_address`, `power_user`, `power_pass`.
        :param pulumi.Input[float] memory_over_commit_ratio: The new VM host RAM memory overcommit ratio. This is computed if it's not set.
        :param pulumi.Input[str] name: The new VM host name. This is computed if it's not set.
        :param pulumi.Input[str] pool: The new VM host pool name. This is computed if it's not set.
        :param pulumi.Input[str] power_address: Address that gives MAAS access to the VM host power control. For example: `qemu+ssh://172.16.99.2/system`. The address
               given here must reachable by the MAAS server. It can't be set if `machine` argument is used.
        :param pulumi.Input[str] power_pass: User password to use for power control of the VM host. Cannot be set if `machine` parameter is used.
        :param pulumi.Input[str] power_user: User name to use for power control of the VM host. Cannot be set if `machine` parameter is used.
        :param pulumi.Input[int] resources_cores_total: The VM host total number of CPU cores.
        :param pulumi.Input[int] resources_local_storage_total: The VM host total local storage (in bytes).
        :param pulumi.Input[int] resources_memory_total: The VM host total RAM memory (in MB).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: A set of tag names to assign to the new VM host. This is computed if it's not set.
        :param pulumi.Input[str] type: The VM host type. Supported values are: `lxd`, `virsh`.
        :param pulumi.Input[str] zone: The new VM host zone name. This is computed if it's not set.
        """
        if cpu_over_commit_ratio is not None:
            pulumi.set(__self__, "cpu_over_commit_ratio", cpu_over_commit_ratio)
        if default_macvlan_mode is not None:
            pulumi.set(__self__, "default_macvlan_mode", default_macvlan_mode)
        if machine is not None:
            pulumi.set(__self__, "machine", machine)
        if memory_over_commit_ratio is not None:
            pulumi.set(__self__, "memory_over_commit_ratio", memory_over_commit_ratio)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pool is not None:
            pulumi.set(__self__, "pool", pool)
        if power_address is not None:
            pulumi.set(__self__, "power_address", power_address)
        if power_pass is not None:
            pulumi.set(__self__, "power_pass", power_pass)
        if power_user is not None:
            pulumi.set(__self__, "power_user", power_user)
        if resources_cores_total is not None:
            pulumi.set(__self__, "resources_cores_total", resources_cores_total)
        if resources_local_storage_total is not None:
            pulumi.set(__self__, "resources_local_storage_total", resources_local_storage_total)
        if resources_memory_total is not None:
            pulumi.set(__self__, "resources_memory_total", resources_memory_total)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="cpuOverCommitRatio")
    def cpu_over_commit_ratio(self) -> Optional[pulumi.Input[float]]:
        """
        The new VM host CPU overcommit ratio. This is computed if it's not set.
        """
        return pulumi.get(self, "cpu_over_commit_ratio")

    @cpu_over_commit_ratio.setter
    def cpu_over_commit_ratio(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "cpu_over_commit_ratio", value)

    @property
    @pulumi.getter(name="defaultMacvlanMode")
    def default_macvlan_mode(self) -> Optional[pulumi.Input[str]]:
        """
        The new VM host default macvlan mode. Supported values are: `bridge`, `passthru`, `private`, `vepa`. This is computed if
        it's not set.
        """
        return pulumi.get(self, "default_macvlan_mode")

    @default_macvlan_mode.setter
    def default_macvlan_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_macvlan_mode", value)

    @property
    @pulumi.getter
    def machine(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier (hostname, FQDN or system ID) of a registered ready MAAS machine. This is going to be deployed and
        registered as a new VM host. This argument conflicts with: `power_address`, `power_user`, `power_pass`.
        """
        return pulumi.get(self, "machine")

    @machine.setter
    def machine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "machine", value)

    @property
    @pulumi.getter(name="memoryOverCommitRatio")
    def memory_over_commit_ratio(self) -> Optional[pulumi.Input[float]]:
        """
        The new VM host RAM memory overcommit ratio. This is computed if it's not set.
        """
        return pulumi.get(self, "memory_over_commit_ratio")

    @memory_over_commit_ratio.setter
    def memory_over_commit_ratio(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "memory_over_commit_ratio", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The new VM host name. This is computed if it's not set.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def pool(self) -> Optional[pulumi.Input[str]]:
        """
        The new VM host pool name. This is computed if it's not set.
        """
        return pulumi.get(self, "pool")

    @pool.setter
    def pool(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pool", value)

    @property
    @pulumi.getter(name="powerAddress")
    def power_address(self) -> Optional[pulumi.Input[str]]:
        """
        Address that gives MAAS access to the VM host power control. For example: `qemu+ssh://172.16.99.2/system`. The address
        given here must reachable by the MAAS server. It can't be set if `machine` argument is used.
        """
        return pulumi.get(self, "power_address")

    @power_address.setter
    def power_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "power_address", value)

    @property
    @pulumi.getter(name="powerPass")
    def power_pass(self) -> Optional[pulumi.Input[str]]:
        """
        User password to use for power control of the VM host. Cannot be set if `machine` parameter is used.
        """
        return pulumi.get(self, "power_pass")

    @power_pass.setter
    def power_pass(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "power_pass", value)

    @property
    @pulumi.getter(name="powerUser")
    def power_user(self) -> Optional[pulumi.Input[str]]:
        """
        User name to use for power control of the VM host. Cannot be set if `machine` parameter is used.
        """
        return pulumi.get(self, "power_user")

    @power_user.setter
    def power_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "power_user", value)

    @property
    @pulumi.getter(name="resourcesCoresTotal")
    def resources_cores_total(self) -> Optional[pulumi.Input[int]]:
        """
        The VM host total number of CPU cores.
        """
        return pulumi.get(self, "resources_cores_total")

    @resources_cores_total.setter
    def resources_cores_total(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "resources_cores_total", value)

    @property
    @pulumi.getter(name="resourcesLocalStorageTotal")
    def resources_local_storage_total(self) -> Optional[pulumi.Input[int]]:
        """
        The VM host total local storage (in bytes).
        """
        return pulumi.get(self, "resources_local_storage_total")

    @resources_local_storage_total.setter
    def resources_local_storage_total(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "resources_local_storage_total", value)

    @property
    @pulumi.getter(name="resourcesMemoryTotal")
    def resources_memory_total(self) -> Optional[pulumi.Input[int]]:
        """
        The VM host total RAM memory (in MB).
        """
        return pulumi.get(self, "resources_memory_total")

    @resources_memory_total.setter
    def resources_memory_total(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "resources_memory_total", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A set of tag names to assign to the new VM host. This is computed if it's not set.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The VM host type. Supported values are: `lxd`, `virsh`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        """
        The new VM host zone name. This is computed if it's not set.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


class VmHost(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cpu_over_commit_ratio: Optional[pulumi.Input[float]] = None,
                 default_macvlan_mode: Optional[pulumi.Input[str]] = None,
                 machine: Optional[pulumi.Input[str]] = None,
                 memory_over_commit_ratio: Optional[pulumi.Input[float]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pool: Optional[pulumi.Input[str]] = None,
                 power_address: Optional[pulumi.Input[str]] = None,
                 power_pass: Optional[pulumi.Input[str]] = None,
                 power_user: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 zone: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a VmHost resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[float] cpu_over_commit_ratio: The new VM host CPU overcommit ratio. This is computed if it's not set.
        :param pulumi.Input[str] default_macvlan_mode: The new VM host default macvlan mode. Supported values are: `bridge`, `passthru`, `private`, `vepa`. This is computed if
               it's not set.
        :param pulumi.Input[str] machine: The identifier (hostname, FQDN or system ID) of a registered ready MAAS machine. This is going to be deployed and
               registered as a new VM host. This argument conflicts with: `power_address`, `power_user`, `power_pass`.
        :param pulumi.Input[float] memory_over_commit_ratio: The new VM host RAM memory overcommit ratio. This is computed if it's not set.
        :param pulumi.Input[str] name: The new VM host name. This is computed if it's not set.
        :param pulumi.Input[str] pool: The new VM host pool name. This is computed if it's not set.
        :param pulumi.Input[str] power_address: Address that gives MAAS access to the VM host power control. For example: `qemu+ssh://172.16.99.2/system`. The address
               given here must reachable by the MAAS server. It can't be set if `machine` argument is used.
        :param pulumi.Input[str] power_pass: User password to use for power control of the VM host. Cannot be set if `machine` parameter is used.
        :param pulumi.Input[str] power_user: User name to use for power control of the VM host. Cannot be set if `machine` parameter is used.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: A set of tag names to assign to the new VM host. This is computed if it's not set.
        :param pulumi.Input[str] type: The VM host type. Supported values are: `lxd`, `virsh`.
        :param pulumi.Input[str] zone: The new VM host zone name. This is computed if it's not set.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VmHostArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a VmHost resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param VmHostArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VmHostArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cpu_over_commit_ratio: Optional[pulumi.Input[float]] = None,
                 default_macvlan_mode: Optional[pulumi.Input[str]] = None,
                 machine: Optional[pulumi.Input[str]] = None,
                 memory_over_commit_ratio: Optional[pulumi.Input[float]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pool: Optional[pulumi.Input[str]] = None,
                 power_address: Optional[pulumi.Input[str]] = None,
                 power_pass: Optional[pulumi.Input[str]] = None,
                 power_user: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 zone: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VmHostArgs.__new__(VmHostArgs)

            __props__.__dict__["cpu_over_commit_ratio"] = cpu_over_commit_ratio
            __props__.__dict__["default_macvlan_mode"] = default_macvlan_mode
            __props__.__dict__["machine"] = machine
            __props__.__dict__["memory_over_commit_ratio"] = memory_over_commit_ratio
            __props__.__dict__["name"] = name
            __props__.__dict__["pool"] = pool
            __props__.__dict__["power_address"] = power_address
            __props__.__dict__["power_pass"] = None if power_pass is None else pulumi.Output.secret(power_pass)
            __props__.__dict__["power_user"] = power_user
            __props__.__dict__["tags"] = tags
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["zone"] = zone
            __props__.__dict__["resources_cores_total"] = None
            __props__.__dict__["resources_local_storage_total"] = None
            __props__.__dict__["resources_memory_total"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["powerPass"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(VmHost, __self__).__init__(
            'maas:index/vmHost:VmHost',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cpu_over_commit_ratio: Optional[pulumi.Input[float]] = None,
            default_macvlan_mode: Optional[pulumi.Input[str]] = None,
            machine: Optional[pulumi.Input[str]] = None,
            memory_over_commit_ratio: Optional[pulumi.Input[float]] = None,
            name: Optional[pulumi.Input[str]] = None,
            pool: Optional[pulumi.Input[str]] = None,
            power_address: Optional[pulumi.Input[str]] = None,
            power_pass: Optional[pulumi.Input[str]] = None,
            power_user: Optional[pulumi.Input[str]] = None,
            resources_cores_total: Optional[pulumi.Input[int]] = None,
            resources_local_storage_total: Optional[pulumi.Input[int]] = None,
            resources_memory_total: Optional[pulumi.Input[int]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            type: Optional[pulumi.Input[str]] = None,
            zone: Optional[pulumi.Input[str]] = None) -> 'VmHost':
        """
        Get an existing VmHost resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[float] cpu_over_commit_ratio: The new VM host CPU overcommit ratio. This is computed if it's not set.
        :param pulumi.Input[str] default_macvlan_mode: The new VM host default macvlan mode. Supported values are: `bridge`, `passthru`, `private`, `vepa`. This is computed if
               it's not set.
        :param pulumi.Input[str] machine: The identifier (hostname, FQDN or system ID) of a registered ready MAAS machine. This is going to be deployed and
               registered as a new VM host. This argument conflicts with: `power_address`, `power_user`, `power_pass`.
        :param pulumi.Input[float] memory_over_commit_ratio: The new VM host RAM memory overcommit ratio. This is computed if it's not set.
        :param pulumi.Input[str] name: The new VM host name. This is computed if it's not set.
        :param pulumi.Input[str] pool: The new VM host pool name. This is computed if it's not set.
        :param pulumi.Input[str] power_address: Address that gives MAAS access to the VM host power control. For example: `qemu+ssh://172.16.99.2/system`. The address
               given here must reachable by the MAAS server. It can't be set if `machine` argument is used.
        :param pulumi.Input[str] power_pass: User password to use for power control of the VM host. Cannot be set if `machine` parameter is used.
        :param pulumi.Input[str] power_user: User name to use for power control of the VM host. Cannot be set if `machine` parameter is used.
        :param pulumi.Input[int] resources_cores_total: The VM host total number of CPU cores.
        :param pulumi.Input[int] resources_local_storage_total: The VM host total local storage (in bytes).
        :param pulumi.Input[int] resources_memory_total: The VM host total RAM memory (in MB).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: A set of tag names to assign to the new VM host. This is computed if it's not set.
        :param pulumi.Input[str] type: The VM host type. Supported values are: `lxd`, `virsh`.
        :param pulumi.Input[str] zone: The new VM host zone name. This is computed if it's not set.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VmHostState.__new__(_VmHostState)

        __props__.__dict__["cpu_over_commit_ratio"] = cpu_over_commit_ratio
        __props__.__dict__["default_macvlan_mode"] = default_macvlan_mode
        __props__.__dict__["machine"] = machine
        __props__.__dict__["memory_over_commit_ratio"] = memory_over_commit_ratio
        __props__.__dict__["name"] = name
        __props__.__dict__["pool"] = pool
        __props__.__dict__["power_address"] = power_address
        __props__.__dict__["power_pass"] = power_pass
        __props__.__dict__["power_user"] = power_user
        __props__.__dict__["resources_cores_total"] = resources_cores_total
        __props__.__dict__["resources_local_storage_total"] = resources_local_storage_total
        __props__.__dict__["resources_memory_total"] = resources_memory_total
        __props__.__dict__["tags"] = tags
        __props__.__dict__["type"] = type
        __props__.__dict__["zone"] = zone
        return VmHost(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="cpuOverCommitRatio")
    def cpu_over_commit_ratio(self) -> pulumi.Output[float]:
        """
        The new VM host CPU overcommit ratio. This is computed if it's not set.
        """
        return pulumi.get(self, "cpu_over_commit_ratio")

    @property
    @pulumi.getter(name="defaultMacvlanMode")
    def default_macvlan_mode(self) -> pulumi.Output[str]:
        """
        The new VM host default macvlan mode. Supported values are: `bridge`, `passthru`, `private`, `vepa`. This is computed if
        it's not set.
        """
        return pulumi.get(self, "default_macvlan_mode")

    @property
    @pulumi.getter
    def machine(self) -> pulumi.Output[Optional[str]]:
        """
        The identifier (hostname, FQDN or system ID) of a registered ready MAAS machine. This is going to be deployed and
        registered as a new VM host. This argument conflicts with: `power_address`, `power_user`, `power_pass`.
        """
        return pulumi.get(self, "machine")

    @property
    @pulumi.getter(name="memoryOverCommitRatio")
    def memory_over_commit_ratio(self) -> pulumi.Output[float]:
        """
        The new VM host RAM memory overcommit ratio. This is computed if it's not set.
        """
        return pulumi.get(self, "memory_over_commit_ratio")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The new VM host name. This is computed if it's not set.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def pool(self) -> pulumi.Output[str]:
        """
        The new VM host pool name. This is computed if it's not set.
        """
        return pulumi.get(self, "pool")

    @property
    @pulumi.getter(name="powerAddress")
    def power_address(self) -> pulumi.Output[Optional[str]]:
        """
        Address that gives MAAS access to the VM host power control. For example: `qemu+ssh://172.16.99.2/system`. The address
        given here must reachable by the MAAS server. It can't be set if `machine` argument is used.
        """
        return pulumi.get(self, "power_address")

    @property
    @pulumi.getter(name="powerPass")
    def power_pass(self) -> pulumi.Output[Optional[str]]:
        """
        User password to use for power control of the VM host. Cannot be set if `machine` parameter is used.
        """
        return pulumi.get(self, "power_pass")

    @property
    @pulumi.getter(name="powerUser")
    def power_user(self) -> pulumi.Output[Optional[str]]:
        """
        User name to use for power control of the VM host. Cannot be set if `machine` parameter is used.
        """
        return pulumi.get(self, "power_user")

    @property
    @pulumi.getter(name="resourcesCoresTotal")
    def resources_cores_total(self) -> pulumi.Output[int]:
        """
        The VM host total number of CPU cores.
        """
        return pulumi.get(self, "resources_cores_total")

    @property
    @pulumi.getter(name="resourcesLocalStorageTotal")
    def resources_local_storage_total(self) -> pulumi.Output[int]:
        """
        The VM host total local storage (in bytes).
        """
        return pulumi.get(self, "resources_local_storage_total")

    @property
    @pulumi.getter(name="resourcesMemoryTotal")
    def resources_memory_total(self) -> pulumi.Output[int]:
        """
        The VM host total RAM memory (in MB).
        """
        return pulumi.get(self, "resources_memory_total")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence[str]]:
        """
        A set of tag names to assign to the new VM host. This is computed if it's not set.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The VM host type. Supported values are: `lxd`, `virsh`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def zone(self) -> pulumi.Output[str]:
        """
        The new VM host zone name. This is computed if it's not set.
        """
        return pulumi.get(self, "zone")

