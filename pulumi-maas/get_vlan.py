# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetVlanResult',
    'AwaitableGetVlanResult',
    'get_vlan',
    'get_vlan_output',
]

@pulumi.output_type
class GetVlanResult:
    """
    A collection of values returned by getVlan.
    """
    def __init__(__self__, dhcp_on=None, fabric=None, id=None, mtu=None, name=None, space=None, vlan=None):
        if dhcp_on and not isinstance(dhcp_on, bool):
            raise TypeError("Expected argument 'dhcp_on' to be a bool")
        pulumi.set(__self__, "dhcp_on", dhcp_on)
        if fabric and not isinstance(fabric, str):
            raise TypeError("Expected argument 'fabric' to be a str")
        pulumi.set(__self__, "fabric", fabric)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if mtu and not isinstance(mtu, int):
            raise TypeError("Expected argument 'mtu' to be a int")
        pulumi.set(__self__, "mtu", mtu)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if space and not isinstance(space, str):
            raise TypeError("Expected argument 'space' to be a str")
        pulumi.set(__self__, "space", space)
        if vlan and not isinstance(vlan, str):
            raise TypeError("Expected argument 'vlan' to be a str")
        pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter(name="dhcpOn")
    def dhcp_on(self) -> bool:
        return pulumi.get(self, "dhcp_on")

    @property
    @pulumi.getter
    def fabric(self) -> str:
        return pulumi.get(self, "fabric")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def mtu(self) -> int:
        return pulumi.get(self, "mtu")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def space(self) -> str:
        return pulumi.get(self, "space")

    @property
    @pulumi.getter
    def vlan(self) -> str:
        return pulumi.get(self, "vlan")


class AwaitableGetVlanResult(GetVlanResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVlanResult(
            dhcp_on=self.dhcp_on,
            fabric=self.fabric,
            id=self.id,
            mtu=self.mtu,
            name=self.name,
            space=self.space,
            vlan=self.vlan)


def get_vlan(fabric: Optional[str] = None,
             vlan: Optional[str] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVlanResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['fabric'] = fabric
    __args__['vlan'] = vlan
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('maas:index/getVlan:getVlan', __args__, opts=opts, typ=GetVlanResult).value

    return AwaitableGetVlanResult(
        dhcp_on=pulumi.get(__ret__, 'dhcp_on'),
        fabric=pulumi.get(__ret__, 'fabric'),
        id=pulumi.get(__ret__, 'id'),
        mtu=pulumi.get(__ret__, 'mtu'),
        name=pulumi.get(__ret__, 'name'),
        space=pulumi.get(__ret__, 'space'),
        vlan=pulumi.get(__ret__, 'vlan'))


@_utilities.lift_output_func(get_vlan)
def get_vlan_output(fabric: Optional[pulumi.Input[str]] = None,
                    vlan: Optional[pulumi.Input[str]] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetVlanResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
