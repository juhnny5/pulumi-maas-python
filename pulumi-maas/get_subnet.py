# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetSubnetResult',
    'AwaitableGetSubnetResult',
    'get_subnet',
    'get_subnet_output',
]

@pulumi.output_type
class GetSubnetResult:
    """
    A collection of values returned by getSubnet.
    """
    def __init__(__self__, allow_dns=None, allow_proxy=None, cidr=None, dns_servers=None, fabric=None, gateway_ip=None, id=None, name=None, rdns_mode=None, vid=None):
        if allow_dns and not isinstance(allow_dns, bool):
            raise TypeError("Expected argument 'allow_dns' to be a bool")
        pulumi.set(__self__, "allow_dns", allow_dns)
        if allow_proxy and not isinstance(allow_proxy, bool):
            raise TypeError("Expected argument 'allow_proxy' to be a bool")
        pulumi.set(__self__, "allow_proxy", allow_proxy)
        if cidr and not isinstance(cidr, str):
            raise TypeError("Expected argument 'cidr' to be a str")
        pulumi.set(__self__, "cidr", cidr)
        if dns_servers and not isinstance(dns_servers, list):
            raise TypeError("Expected argument 'dns_servers' to be a list")
        pulumi.set(__self__, "dns_servers", dns_servers)
        if fabric and not isinstance(fabric, str):
            raise TypeError("Expected argument 'fabric' to be a str")
        pulumi.set(__self__, "fabric", fabric)
        if gateway_ip and not isinstance(gateway_ip, str):
            raise TypeError("Expected argument 'gateway_ip' to be a str")
        pulumi.set(__self__, "gateway_ip", gateway_ip)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if rdns_mode and not isinstance(rdns_mode, int):
            raise TypeError("Expected argument 'rdns_mode' to be a int")
        pulumi.set(__self__, "rdns_mode", rdns_mode)
        if vid and not isinstance(vid, int):
            raise TypeError("Expected argument 'vid' to be a int")
        pulumi.set(__self__, "vid", vid)

    @property
    @pulumi.getter(name="allowDns")
    def allow_dns(self) -> bool:
        return pulumi.get(self, "allow_dns")

    @property
    @pulumi.getter(name="allowProxy")
    def allow_proxy(self) -> bool:
        return pulumi.get(self, "allow_proxy")

    @property
    @pulumi.getter
    def cidr(self) -> str:
        return pulumi.get(self, "cidr")

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> Sequence[str]:
        return pulumi.get(self, "dns_servers")

    @property
    @pulumi.getter
    def fabric(self) -> str:
        return pulumi.get(self, "fabric")

    @property
    @pulumi.getter(name="gatewayIp")
    def gateway_ip(self) -> str:
        return pulumi.get(self, "gateway_ip")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="rdnsMode")
    def rdns_mode(self) -> int:
        return pulumi.get(self, "rdns_mode")

    @property
    @pulumi.getter
    def vid(self) -> int:
        return pulumi.get(self, "vid")


class AwaitableGetSubnetResult(GetSubnetResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSubnetResult(
            allow_dns=self.allow_dns,
            allow_proxy=self.allow_proxy,
            cidr=self.cidr,
            dns_servers=self.dns_servers,
            fabric=self.fabric,
            gateway_ip=self.gateway_ip,
            id=self.id,
            name=self.name,
            rdns_mode=self.rdns_mode,
            vid=self.vid)


def get_subnet(cidr: Optional[str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSubnetResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['cidr'] = cidr
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('maas:index/getSubnet:getSubnet', __args__, opts=opts, typ=GetSubnetResult).value

    return AwaitableGetSubnetResult(
        allow_dns=pulumi.get(__ret__, 'allow_dns'),
        allow_proxy=pulumi.get(__ret__, 'allow_proxy'),
        cidr=pulumi.get(__ret__, 'cidr'),
        dns_servers=pulumi.get(__ret__, 'dns_servers'),
        fabric=pulumi.get(__ret__, 'fabric'),
        gateway_ip=pulumi.get(__ret__, 'gateway_ip'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        rdns_mode=pulumi.get(__ret__, 'rdns_mode'),
        vid=pulumi.get(__ret__, 'vid'))


@_utilities.lift_output_func(get_subnet)
def get_subnet_output(cidr: Optional[pulumi.Input[str]] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSubnetResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
